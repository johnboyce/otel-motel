# Application Configuration
quarkus.application.name=otel-motel

# DynamoDB Configuration
# Using custom properties (not Quarkus extension) to avoid warnings
aws.dynamodb.endpoint-override=http://localhost:4566
aws.dynamodb.region=us-east-1
aws.dynamodb.credentials.type=static
aws.dynamodb.credentials.access-key-id=test
aws.dynamodb.credentials.secret-access-key=test

# OpenTelemetry OTLP Exporter Configuration
quarkus.otel.exporter.otlp.endpoint=http://localhost:4318
quarkus.otel.exporter.otlp.protocol=http/protobuf

# Pipeline Control - Enable/disable logging pipelines
# Set to false to disable specific pipelines
# Can be overridden with environment variables:
#   LOGGING_PIPELINE_OTEL_DIRECT_ENABLED
#   LOGGING_PIPELINE_GELF_VECTOR_ENABLED
#   LOGGING_PIPELINE_OTEL_VECTOR_ENABLED
logging.pipeline.otel-direct.enabled=${LOGGING_PIPELINE_OTEL_DIRECT_ENABLED:true}
logging.pipeline.gelf-vector.enabled=${LOGGING_PIPELINE_GELF_VECTOR_ENABLED:true}
logging.pipeline.otel-vector.enabled=${LOGGING_PIPELINE_OTEL_VECTOR_ENABLED:true}

# Enable tracing
quarkus.otel.traces.sampler=always_on

# Enable metrics
quarkus.otel.metrics.enabled=true

# Enable logs (for log correlation) - controlled by pipeline settings
quarkus.otel.logs.enabled=${logging.pipeline.otel-direct.enabled:true}

# Resource attributes
quarkus.otel.resource.attributes=service.name=otel-motel,service.version=1.0-SNAPSHOT,deployment.environment=dev

# Logging Configuration - ECS JSON format for Elasticsearch
quarkus.log.console.json.enabled=true
quarkus.log.console.json.log-format=ecs
quarkus.log.console.json.pretty-print=false
quarkus.log.level=INFO
quarkus.log.category."com.johnnyb".level=DEBUG

# GELF Logging Configuration for Vector
quarkus.log.handler.gelf.enabled=${logging.pipeline.gelf-vector.enabled:true}
quarkus.log.handler.gelf.host=localhost
quarkus.log.handler.gelf.port=12201
quarkus.log.handler.gelf.facility=otel-motel
quarkus.log.handler.gelf.extract-stack-trace=true
quarkus.log.handler.gelf.include-full-mdc=true
# Disable compression for easier processing in Vector
quarkus.log.handler.gelf.skip-hostname-resolution=true
quarkus.log.handler.gelf.additional-field._service_name.value=otel-motel
quarkus.log.handler.gelf.additional-field._service_version.value=1.0-SNAPSHOT
quarkus.log.handler.gelf.additional-field._deployment_environment.value=dev

# GraphQL Configuration
quarkus.smallrye-graphql.ui.always-include=true
quarkus.smallrye-graphql.print-data-fetcher-exception=true

# Security Configuration
# Enable OIDC for JWT token validation
quarkus.oidc.enabled=true
quarkus.oidc.auth-server-url=http://localhost:8180/realms/otel-motel
quarkus.oidc.client-id=otel-motel-client
quarkus.oidc.credentials.secret=secret
# TLS verification is disabled in dev profile below

# JWT Configuration
mp.jwt.verify.publickey.location=http://localhost:8180/realms/otel-motel/protocol/openid-connect/certs
mp.jwt.verify.issuer=http://localhost:8180/realms/otel-motel

# Security policy
quarkus.http.auth.policy.read-policy.roles-allowed=user,admin
quarkus.http.auth.policy.write-policy.roles-allowed=admin

# Allow unauthenticated access to GraphQL UI and schema for development
quarkus.http.auth.permission.public.paths=/q/graphql-ui,/q/graphql-ui/*,/graphql/schema.graphql
quarkus.http.auth.permission.public.policy=permit
quarkus.http.auth.permission.authenticated.paths=/graphql
quarkus.http.auth.permission.authenticated.policy=authenticated

# Development profile - disable security for local testing
%dev.quarkus.oidc.enabled=false
%dev.quarkus.security.auth.enabled-in-dev-mode=false

# Test profile - use mock security
%test.quarkus.oidc.enabled=false
%test.quarkus.security.auth.enabled-in-dev-mode=false

# Quinoa Configuration - Frontend Integration
quarkus.quinoa.build-dir=build
quarkus.quinoa.enable-spa-routing=true
quarkus.quinoa.package-manager-install=true
quarkus.quinoa.package-manager-install.node-version=20.11.1
quarkus.quinoa.package-manager=npm
